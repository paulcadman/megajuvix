name: Juvix Compiler CI
"on":
  workflow_dispatch:
    inputs:
      ref:
        description: the repository ref to build
        required: true
        default: main
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    types:
      - opened
      - reopened
      - synchronize
      - ready_for_review

concurrency:
  group: "${{ github.workflow }}-${{ github.head_ref || github.run_id }}"
  cancel-in-progress: true

env:
  SKIP: ormolu,format-juvix-files,typecheck-juvix-examples
  VAMPIRREPO: anoma/vamp-ir
  VAMPIRVERSION: v0.1.3
  CAIRO_VM_VERSION: 42e04161de82d7e5381258def4b65087c8944660

jobs:
  pre-commit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - uses: pre-commit/action@v3.0.0

  ormolu:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: mrkkrp/ormolu-action@v11
        with:
          version: 0.5.3.0
          extra-args: >-
            --ghc-opt -XDerivingStrategies
            --ghc-opt -XImportQualifiedPost
            --ghc-opt -XMultiParamTypeClasses
            --ghc-opt -XPatternSynonyms
            --ghc-opt -XStandaloneDeriving
            --ghc-opt -XTemplateHaskell
            --ghc-opt -XUnicodeSyntax
            --ghc-opt -XBangPatterns

  build-and-test-linux:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout our repository
        uses: actions/checkout@v3
        with:
          path: main
          submodules: true

      - name: Add ~/.local/bin to PATH
        run: |
          mkdir -p "$HOME/.local/bin"
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - run: echo "HOME=$HOME" >> $GITHUB_ENV
        shell: bash

      - name: Cache CairoVM
        id: cache-cairo-vm
        uses: actions/cache@v4
        with:
          path: ${{ env.HOME }}/.local/bin/cairo-vm-cli
          key: ${{ runner.os }}-cairo-vm-${{ env.CAIRO_VM_VERSION }}

      - name: Install Rust toolchain
        if: steps.cache-cairo-vm.outputs.cache-hit != 'true'
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: Checkout CairoVM
        uses: actions/checkout@v4
        if: steps.cache-cairo-vm.outputs.cache-hit != 'true'
        with:
          repository: lambdaclass/cairo-vm
          path: cairo-vm
          ref: ${{ env.CAIRO_VM_VERSION }}

      - name: ls cairo-vm
        shell: bash
        run: |
          cd cairo-vm
          ls -lh

      - name: Install Cairo VM
        if: steps.cache-cairo-vm.outputs.cache-hit != 'true'
        shell: bash
        run: |
          cd cairo-vm
          cargo build --release
          cp target/release/cairo-vm-cli $HOME/.local/bin/cairo-vm-cli

      - name: Install run_cairo_vm.sh
        shell: bash
        run: |
          cp main/scripts/run_cairo_vm.sh $HOME/.local/bin/run_cairo_vm.sh

      - name: run cairo stuff
        shell: bash
        run: |
          cairo-vm-cli --help
          run_cairo_vm.sh

  build-and-test-macos:
    runs-on: macos-12
    steps:
      - name: Checkout our repository
        uses: actions/checkout@v3
        with:
          path: main
          submodules: true

      - name: Add ~/.local/bin to PATH
        run: |
          mkdir -p "$HOME/.local/bin"
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - run: echo "HOME=$HOME" >> $GITHUB_ENV
        shell: bash

      - name: Cache CairoVM
        id: cache-cairo-vm
        uses: actions/cache@v4
        with:
          path: ${{ env.HOME }}/.local/bin/cairo-vm-cli
          key: ${{ runner.os }}-cairo-vm-${{ env.CAIRO_VM_VERSION }}

      - name: Install Rust toolchain
        if: steps.cache-cairo-vm.outputs.cache-hit != 'true'
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: Checkout CairoVM
        uses: actions/checkout@v4
        if: steps.cache-cairo-vm.outputs.cache-hit != 'true'
        with:
          repository: lambdaclass/cairo-vm
          path: cairo-vm
          ref: ${{ env.CAIRO_VM_VERSION }}

      - name: Install Cairo VM
        if: steps.cache-cairo-vm.outputs.cache-hit != 'true'
        shell: bash
        run: |
          cd cairo-vm
          cargo build --release
          cp -a target/release/cairo-vm-cli $HOME/.local/bin/cairo-vm-cli
          chmod a+x $HOME/.local/bin/cairo-vm-cli

      - name: Install run_cairo_vm.sh
        shell: bash
        run: |
          cp -a main/scripts/run_cairo_vm.sh $HOME/.local/bin/run_cairo_vm.sh
          chmod a+x $HOME/.local/bin/run_cairo_vm.sh

      - name: run cairo stuff
        shell: bash
        run: |
          cairo-vm-cli --help
          run_cairo_vm.sh
